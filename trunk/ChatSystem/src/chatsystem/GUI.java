package chatsystem;

import interfaces.*;
import java.awt.Color;
import javax.swing.DefaultListModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author seb
 */
public class GUI extends javax.swing.JFrame implements CtrlToGUI {

    /**
     * Creates new form EntryFrame
     */
    private static DefaultListModel listModel;
    private StyledDocument doc;
    private Style errorStyle, receiveStyle, sendStyle;

    public GUI() {
        initComponents();
        UsagePanel.setVisible(false);
        doc = receivedMessageArea.getStyledDocument();

        // initialisation des styles de police utilisé
        // rouge pour une erreur
        // bleu pour un message recu
        // noir pour les messages envoyé
        errorStyle = receivedMessageArea.addStyle("errorStyle", null);
        receiveStyle = receivedMessageArea.addStyle("fromStyle", null);
        sendStyle = receivedMessageArea.addStyle("toStyle", null);
        StyleConstants.setForeground(errorStyle, Color.RED);
        StyleConstants.setForeground(receiveStyle, Color.BLUE);
        StyleConstants.setForeground(sendStyle, Color.BLACK);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EntryPanel = new javax.swing.JPanel();
        connectButton = new javax.swing.JButton();
        usernameArea = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        UsagePanel = new javax.swing.JPanel();
        receivedMessagePanel = new javax.swing.JScrollPane();
        receivedMessageArea = new javax.swing.JTextPane();
        sendMessagePanel = new javax.swing.JScrollPane();
        sendMessageArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        fileChooseButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        userlistLabel = new javax.swing.JLabel();
        listPanel = new javax.swing.JScrollPane();
        connectedList = new javax.swing.JList();
        nameInfoLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        receiverTextField = new javax.swing.JTextField();
        toLabel = new javax.swing.JLabel();
        messageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        EntryPanel.setPreferredSize(new java.awt.Dimension(538, 503));

        connectButton.setText("CONNECT");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        usernameArea.setText("username");
        usernameArea.setSelectedTextColor(new java.awt.Color(153, 153, 255));
        usernameArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameAreaActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("       BIENVENUE sur Chat System\n\nCette nouvelle application vous permet\nde communiquer avec des amis en \nPeer-to-Peer, vous pouvez soit envoyer \ndes message soit envoyer des fichiers\nsous l'accord du destinataire.\nPour vous connecter il vous suffit de \nrentrer un nom \n");
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout EntryPanelLayout = new javax.swing.GroupLayout(EntryPanel);
        EntryPanel.setLayout(EntryPanelLayout);
        EntryPanelLayout.setHorizontalGroup(
            EntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EntryPanelLayout.createSequentialGroup()
                .addGroup(EntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EntryPanelLayout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addComponent(usernameArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(EntryPanelLayout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(connectButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EntryPanelLayout.createSequentialGroup()
                .addGap(0, 141, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(139, 139, 139))
        );
        EntryPanelLayout.setVerticalGroup(
            EntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EntryPanelLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectButton)
                .addContainerGap(209, Short.MAX_VALUE))
        );

        getContentPane().add(EntryPanel);

        receivedMessageArea.setEditable(false);
        receivedMessagePanel.setViewportView(receivedMessageArea);

        sendMessageArea.setColumns(20);
        sendMessageArea.setRows(5);
        sendMessageArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        sendMessagePanel.setViewportView(sendMessageArea);

        sendButton.setText("SEND");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        fileChooseButton.setText("FILE");
        fileChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooseButtonActionPerformed(evt);
            }
        });

        disconnectButton.setText("DISCONNECT");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        userlistLabel.setText("Connected user");

        connectedList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                connectedListValueChanged(evt);
            }
        });
        listPanel.setViewportView(connectedList);

        nameInfoLabel.setText("My name :");

        usernameLabel.setText("username");

        receiverTextField.setEditable(false);

        toLabel.setText("To :");

        messageLabel.setText("Message :");

        javax.swing.GroupLayout UsagePanelLayout = new javax.swing.GroupLayout(UsagePanel);
        UsagePanel.setLayout(UsagePanelLayout);
        UsagePanelLayout.setHorizontalGroup(
            UsagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UsagePanelLayout.createSequentialGroup()
                .addGroup(UsagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UsagePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(nameInfoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameLabel))
                    .addGroup(UsagePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(disconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UsagePanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(listPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UsagePanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(userlistLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(UsagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(receivedMessagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(UsagePanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(UsagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UsagePanelLayout.createSequentialGroup()
                                .addComponent(toLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(receiverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(messageLabel)
                            .addGroup(UsagePanelLayout.createSequentialGroup()
                                .addComponent(sendMessagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(UsagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fileChooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sendButton))))))
                .addGap(12, 12, 12))
        );
        UsagePanelLayout.setVerticalGroup(
            UsagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UsagePanelLayout.createSequentialGroup()
                .addGroup(UsagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UsagePanelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(UsagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameInfoLabel)
                            .addComponent(usernameLabel))
                        .addGap(85, 85, 85)
                        .addComponent(userlistLabel)
                        .addGap(18, 18, 18)
                        .addComponent(listPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE))
                    .addGroup(UsagePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(receivedMessagePanel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(UsagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(UsagePanelLayout.createSequentialGroup()
                        .addGroup(UsagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(receiverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toLabel))
                        .addGap(1, 1, 1)
                        .addComponent(messageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(UsagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(UsagePanelLayout.createSequentialGroup()
                                .addComponent(sendButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fileChooseButton))
                            .addComponent(sendMessagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(disconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        getContentPane().add(UsagePanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        System.out.println("DEBUG *** GUI : pressed CONNECT ***");
        ChatSystem.getControler().createLocalInfo(usernameArea.getText());
        listModel = new DefaultListModel();
        connectedList.setModel(listModel);
        connectedList.validate();
        ChatSystem.getControler().performConnect();
        this.usernameLabel.setText(ChatSystem.getModel().getUsername());

        try {
            doc.insertString(doc.getLength(), "Welcome to the chat ! \nyour adress ip is : " + ChatSystem.getModel().getLocalAdress() + "\n", errorStyle);
        } catch (BadLocationException e) {
            System.err.println(e);
        }

        this.EntryPanel.setVisible(false);

        /////////////////// simplement pour tester avec un remote user
        listModel.addElement("jack@192.168.0.3");
        connectedList.revalidate();
        //////////////////

        this.UsagePanel.setVisible(true);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);

    }//GEN-LAST:event_connectButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        System.out.println("DEBUG *** GUI : pressed SEND ***");
        String remoteName = ChatSystem.getModel().getReceiverName(); // pour plus de clarté

        if (ChatSystem.getModel().getRemoteTable().contains(remoteName) == false) {
            // cas ou le remoteName n'est pas dans notre table
            System.err.println("no such remote user");
            erreurReceiver();
        } else {
            // cas nominal on envoie la requete et on affiche dans notre boite de dialogue
            try {
                doc.insertString(doc.getLength(), "To " + remoteName + " : " + sendMessageArea.getText() + "\n", sendStyle);
                ChatSystem.getControler().performSendMessage(sendMessageArea.getText(), remoteName);
            } catch (BadLocationException e) {
                System.err.println(e);
            }
            sendMessageArea.setText("");
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void fileChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooseButtonActionPerformed
        System.out.println("DEBUG *** GUI : pressed FILE ***");
        ChatSystem.getControler().performSendFile();
    }//GEN-LAST:event_fileChooseButtonActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        System.out.println("DEBUG *** GUI : pressed DISCONNECT ***");
        ChatSystem.getControler().performDisconnect(usernameLabel.getText());
        receivedMessageArea.setText("");
        this.UsagePanel.setVisible(false);
        this.EntryPanel.setVisible(true);
    }//GEN-LAST:event_disconnectButtonActionPerformed

    // quand on selectionne un receiver
    private void connectedListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_connectedListValueChanged
        System.out.println("DEBUG *** GUI : selected a receiver ***");
        ChatSystem.getModel().setReceiverName((String) (connectedList.getSelectedValue()));
        receiverTextField.setText((String) (connectedList.getSelectedValue()));
    }//GEN-LAST:event_connectedListValueChanged

    private void usernameAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameAreaActionPerformed

    }//GEN-LAST:event_usernameAreaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel EntryPanel;
    private javax.swing.JPanel UsagePanel;
    private javax.swing.JButton connectButton;
    private javax.swing.JList connectedList;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JButton fileChooseButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JScrollPane listPanel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JLabel nameInfoLabel;
    private javax.swing.JTextPane receivedMessageArea;
    private javax.swing.JScrollPane receivedMessagePanel;
    private javax.swing.JTextField receiverTextField;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea sendMessageArea;
    private javax.swing.JScrollPane sendMessagePanel;
    private javax.swing.JLabel toLabel;
    private javax.swing.JLabel userlistLabel;
    private javax.swing.JTextField usernameArea;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    // toutes les fonctions à implémenter !
    @Override
    // appelé quand on recoit un hello ou hellook , il faut ajouter le nom a la list
    public void addUser(String remoteName) {
        System.out.println("DEBUG *** GUI : addUser <= when we receive a hello ***");
        listModel.addElement(remoteName);
        connectedList.revalidate();
    }

    @Override
    // appelé quand on recoit un message
    public void processTextMessage(String message, String remoteName) {
        System.out.println("DEBUG *** GUI : processTextMessage <= when we receive a message ***");
        try {
            doc.insertString(doc.getLength(), "from " + remoteName + " : " + message + "\n", receiveStyle);
        } catch (BadLocationException e) {
            System.err.println(e);
        }
        System.err.println("DEBUG *** GUI : processTextMessage = "+message+" ***");
    }

    @Override
    // appelé quand le fichier est bien recu
    public void notifyTransmitted() {
        System.out.println("DEBUG *** GUI : notifyTransmitted <= when we have successfully received the file ***");

        try {
            doc.insertString(doc.getLength(), "File Transmitted ! " + "\n", errorStyle);
        } catch (BadLocationException e) {
            System.err.println(e);
        }
    }

    @Override
    // appelé quand le fichier n'a pas été recu
    public void notifyNotTransmitted() {
        System.out.println("DEBUG *** GUI : notifyNotTransmitted <= when we haven't received the file ***");

        try {
            doc.insertString(doc.getLength(), "File failed to Transmit ! " + "\n", errorStyle);
        } catch (BadLocationException e) {
            System.err.println(e);
        }
    }

    @Override
    // appelé par le ctrl quand on recoit un goodbye il faut supprimer le nom de la liste
    public void deleteUser(String remoteName) {
        System.out.println("DEBUG *** GUI : deleteUser <= when we receive a goodBye ***");

        //on supprime l'élément de notre list(que l'utilisateur voit) et on met a jour la liste
        listModel.removeElement(remoteName);
        connectedList.revalidate();
    }
    /*
     CAS ERREUR dans selection receiver
     */

    public void erreurReceiver() {
        System.out.println("DEBUG *** GUI : erreurReceiver <= when we didn't choose any receiver ***");

        try {
            doc.insertString(doc.getLength(), "Erreur : selectionnez un utilisateur distant\n", errorStyle);
        } catch (BadLocationException e) {
            System.err.println(e);
        }
    }
}
